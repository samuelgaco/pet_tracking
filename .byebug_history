continue
JSON.parse(response.body)["pets"]
JSON.parse(response.body)
response.body
response
json_response['dogs']
json_response['dogs']['small']
 continue
        pet = PetTracking::Domain::Pet.new(
          tracker: PetTracking::Domain::Tracker.new(
            tracker_type: params[:tracker_type],
            pet_type: params[:pet_type]
          ),
          owner_id: params[:owner_id],
          in_zone: params[:in_zone],
          lost_tracker: params[:lost_tracker]
        )
params
continue
params
continue
params
continue
params
continue
params
params["in_zone"
params
continue
controller
@controller.instance_variables
@controller
continue
      get outside_zone_pets_path
      expect(response).to have_http_status(200)
    repository.pets.clear  
json_response
json_response['dogs']
json_response['dogs']['small']
continue
repository.pets
repository.clear
repository.pets
repository.pets.count
repository.pets.clear  
repository.pets.count
repository.pets
repository
repository.pets.clear  
repository
      expect(json_response['dogs']['small']).to eq(1)
      json_response = JSON.parse(response.body)
      expect(response).to have_http_status(200)
response      expect(response).to have_http_status(200)
response
      get outside_zone_pets_path
exit
outside_zone_pets_path
outside_zone_path
response
response.body
      json_response = JSON.parse(response.body)
outside_zone_pets_path
continue
response
JSON.parse(response)
JSON.parse(response.body)
JSON.parse(response.status)
JSON.parse(response)
JSON.parse(response.status)
JSON.parse(response.body)
response
        expect(response).to have_http_status(:unprocessable_entity)
response
continue
        expect(JSON.parse(response.body)["pets"].count).to eq(POST_TIMES)
continue
JSON.parse(response.body)["pets"].count
POST_TIMES
JSON.parse(response.body)["pets"].count
JSON.parse(response.body)["pets"]
JSON.parse(response.body).["pets"
JSON.parse(response.body)
JSON.parse(response.body)["pet_repository"]
JSON.parse(response.body)["pet_repository"]["pets"]
JSON.parse(response.body)["pet_repository"]["pets"].count
continue
JSON.parse(response.body)["pet_repository"]["pets"].count
JSON.parse(response.body)["pet_repository"]["pets"]
JSON.parse(response.body)["pet_repository"]["pets"
JSON.parse(response.body)["pet_repository"].count
JSON.parse(response.body)["pet_repository"]
JSON.parse(response.body)
JSON.parse(response.body)["pet"]
continue
JSON.parse(response.body)["pet"]
JSON.parse(response.body)
continue
JSON.parse(response.body)
JSON.parse(response.body)["pet"]
JSON.parse(response.body)["pet"].count
JSON.parse(response.body)["pet"]
continue
JSON.parse(response.body)
response
response.buff
response
response.keys
response.data
response
        expect {
          post pets_path, params: valid_params
        }.to change(repository.pets, :count).by(1)
valid_params
pets_path
repository.pets
repository
continue
          @pets.values.reject { |pet| pet.in_zone == "true" }
          @pets.values.reject(&:in_zone)
          @pets
          @pets.values.map(&:in_zone)
          @pets.values.map(&:boolean)
          @pets.values.map(&:in_zone) == "false"
          @pets.values.map(&:in_zone)
          !!@pets.values.map(&:in_zone)
          !@pets.values.map(&:in_zone)
          @pets.values.map(&:in_zone).sum()
          @pets.values.map(&:in_zone)
@pets.values.reject(&:in_zone)
@pets.values
@pets.values[0].in_zone
@pets.values[0]
@pets.values.last
@pets.values
@pets.values.in_zone
@pets.values
@pets.values.reject(&:in_zone)
@pets
continue
 @repository
@repository.find_outside_zone
continue
        result = service.pets_outside_zone_by_tracker_type
        service = PetTracking::Services::PetTrackingService.new(self.class.repository)
result = service.pets_outside_zone_by_tracker_type
self.class.repository
continue
self.class.repository
continue
@repository
continue
self.class.repository
result
continue
self.class.repository.save(pet)
continue
tracker.pet_type
tracker.tracker_type
tracker
continue
service.pets_outside_zone_by_tracker_type
continue
service.pets_outside_zone_by_tracker_type
continue
service.pets_outside_zone_by_tracker_type
continue
@repository
service.pets_outside_zone_by_tracker_type
continue
@service.pets_outside_zone_by_tracker_type
continue
@service.pets_outside_zone_by_tracker_type
continue
@service.pets_outside_zone_by_tracker_type
continue
@service.pets_outside_zone_by_tracker_type
continue
@service.pets_outside_zone_by_tracker_type
        @service = PetTracking::Services::PetTrackingService.new(@repository)
continue
@repository
@service
continue
@repository
continue
@repository
@service
@service.pets_outside_zone_by_tracker_type
continue
@service.pets_outside_zone_by_tracker_type
